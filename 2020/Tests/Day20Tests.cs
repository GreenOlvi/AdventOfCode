using NUnit.Framework;
using FluentAssertions;
using AOC2020.Day20;
using System.Linq;

namespace Tests
{
    [TestFixture]
    public class Day20Tests
    {
        private static readonly string[] ExampleData =
        {
            "Tile 2311:",
            "..##.#..#.",
            "##..#.....",
            "#...##..#.",
            "####.#...#",
            "##.##.###.",
            "##...#.###",
            ".#.#.#..##",
            "..#....#..",
            "###...#.#.",
            "..###..###",
            "",
            "Tile 1951:",
            "#.##...##.",
            "#.####...#",
            ".....#..##",
            "#...######",
            ".##.#....#",
            ".###.#####",
            "###.##.##.",
            ".###....#.",
            "..#.#..#.#",
            "#...##.#..",
            "",
            "Tile 1171:",
            "####...##.",
            "#..##.#..#",
            "##.#..#.#.",
            ".###.####.",
            "..###.####",
            ".##....##.",
            ".#...####.",
            "#.##.####.",
            "####..#...",
            ".....##...",
            "",
            "Tile 1427:",
            "###.##.#..",
            ".#..#.##..",
            ".#.##.#..#",
            "#.#.#.##.#",
            "....#...##",
            "...##..##.",
            "...#.#####",
            ".#.####.#.",
            "..#..###.#",
            "..##.#..#.",
            "",
            "Tile 1489:",
            "##.#.#....",
            "..##...#..",
            ".##..##...",
            "..#...#...",
            "#####...#.",
            "#..#.#.#.#",
            "...#.#.#..",
            "##.#...##.",
            "..##.##.##",
            "###.##.#..",
            "",
            "Tile 2473:",
            "#....####.",
            "#..#.##...",
            "#.##..#...",
            "######.#.#",
            ".#...#.#.#",
            ".#########",
            ".###.#..#.",
            "########.#",
            "##...##.#.",
            "..###.#.#.",
            "",
            "Tile 2971:",
            "..#.#....#",
            "#...###...",
            "#.#.###...",
            "##.##..#..",
            ".#####..##",
            ".#..####.#",
            "#..#.#..#.",
            "..####.###",
            "..#.#.###.",
            "...#.#.#.#",
            "",
            "Tile 2729:",
            "...#.#.#.#",
            "####.#....",
            "..#.#.....",
            "....#..#.#",
            ".##..##.#.",
            ".#.####...",
            "####.#.#..",
            "##.####...",
            "##..#.##..",
            "#.##...##.",
            "",
            "Tile 3079:",
            "#.#.#####.",
            ".#..######",
            "..#.......",
            "######....",
            "####.#..#.",
            ".#...#.##.",
            "#.#####.##",
            "..#.###...",
            "..#.......",
            "..#.###...",
        };

        private readonly Puzzle _example = new Puzzle(ExampleData);

        [Test]
        public void Solution1Test()
        {
            _example.Solution1().Should().Be(20899048083289);
        }

        [Test]
        public void Solution2Test()
        {
            _example.Solution2().Should().Be(273);
        }

        private static readonly Tile ExampleTile = Puzzle.ParseTile(
            "Tile 1091:",
            "..#.##.##.",
            ".........#",
            "#.#......#",
            ".###..#...",
            "#.#.......",
            "##......##",
            "......#..#",
            "#.#....#..",
            "#...#....#",
            "#####....#");

        [Test]
        public void TileBordersTest()
        {
            ExampleTile.TopBorder.Should().Be(182);
            ExampleTile.RightBorder.Should().Be(411);
            ExampleTile.BottomBorder.Should().Be(543);
            ExampleTile.LeftBorder.Should().Be(948);
        }

        [Test]
        public void TileFlitHorizontalTest()
        {
            ExampleTile.FlipHorizontal().Should().Be(Puzzle.ParseTile(
                "Tile 1091:",
                ".##.##.#..",
                "#.........",
                "#......#.#",
                "...#..###.",
                ".......#.#",
                "##......##",
                "#..#......",
                "..#....#.#",
                "#....#...#",
                "#....#####"));
        }

        [Test]
        public void TileFlitVerticalTest()
        {
            ExampleTile.FlipVertical().Should().Be(Puzzle.ParseTile(
                "Tile 1091:",
                "#####....#",
                "#...#....#",
                "#.#....#..",
                "......#..#",
                "##......##",
                "#.#.......",
                ".###..#...",
                "#.#......#",
                ".........#",
                "..#.##.##."));
        }

        [Test]
        public void TileRotateRightTest()
        {
            ExampleTile.RotateRight().Should().Be(Puzzle.ParseTile(
                "Tile 1091:",
                "###.##.#..",
                "#...#.#...",
                "#.#..###.#",
                "#.....#...",
                "##.......#",
                ".........#",
                "...#..#...",
                "..#......#",
                "....#....#",
                "##.##..##."));
        }

        [Test]
        public void TileRotateLeftTest()
        {
            ExampleTile.RotateLeft().Should().Be(Puzzle.ParseTile(
                "Tile 1091:",
                ".##..##.##",
                "#....#....",
                "#......#..",
                "...#..#...",
                "#.........",
                "#.......##",
                "...#.....#",
                "#.###..#.#",
                "...#.#...#",
                "..#.##.###"));
        }

        [Test]
        public void TileRotate180Test()
        {
            ExampleTile.Rotate180().Should().Be(Puzzle.ParseTile(
                "Tile 1091:",
                "#....#####",
                "#....#...#",
                "..#....#.#",
                "#..#......",
                "##......##",
                ".......#.#",
                "...#..###.",
                "#......#.#",
                "#.........",
                ".##.##.#.."));
        }

        [Test]
        public void TileRemoveBorderTest()
        {
            var expected = new[]
            {
                "........",
                ".#......",
                "###..#..",
                ".#......",
                "#......#",
                ".....#..",
                ".#....#.",
                "...#....",
            }
                .Select(line => (ushort)line.Select((c, o) => c == '#' ? (1 << (line.Length - o - 1)) : 0).Sum())
                .ToArray();

            ExampleTile.RemoveBorder().Should().BeEquivalentTo(expected);
        }

        private static readonly Image ExampleImage = new Image(new[]
        {
            "..#.##.##.",
            ".........#",
            "#.#......#",
            ".###..#...",
            "#.#.......",
            "##......##",
            "......#..#",
            "#.#....#..",
            "#...#....#",
            "#####....#",
        });

        [Test]
        public void ImageRotateRightTest()
        {
            ExampleImage.RotateRight().Lines
                .Should().BeEquivalentTo(
                    "###.##.#..",
                    "#...#.#...",
                    "#.#..###.#",
                    "#.....#...",
                    "##.......#",
                    ".........#",
                    "...#..#...",
                    "..#......#",
                    "....#....#",
                    "##.##..##.");
        }

        [Test]
        public void ImageRotateLeftTest()
        {
            ExampleImage.RotateLeft().Lines
                .Should().BeEquivalentTo(
                    ".##..##.##",
                    "#....#....",
                    "#......#..",
                    "...#..#...",
                    "#.........",
                    "#.......##",
                    "...#.....#",
                    "#.###..#.#",
                    "...#.#...#",
                    "..#.##.###");
        }

        private static readonly Image NessieImage = new Image(new []{
            ".####...#####..#...###..",
            "#####..#..#.#.####..#.#.",
            ".#.#...#.###...#.##.##..",
            "#.#.##.###.#.##.##.#####",
            "..##.###.####..#.####.##",
            "...#.#..##.##...#..#..##",
            "#.##.#..#.#..#..##.#.#..",
            ".###.##.....#...###.#...",
            "#.####.#.#....##.#..#.#.",
            "##...#..#....#..#...####",
            "..#.##...###..#.#####..#",
            "....#.##.#.#####....#...",
            "..##.##.###.....#.##..#.",
            "#...#...###..####....##.",
            ".#.##...#.##.#.#.###...#",
            "#.###.#..####...##..#...",
            "#.###...#.##...#.######.",
            ".###.###.#######..#####.",
            "..##.#..#..#.#######.###",
            "#.#..##.########..#..##.",
            "#.#####..#.#...##..#....",
            "#....##..#.#########..##",
            "#...#.....#..##...###.##",
            "#..###....##.#...##.##.#",
        });
        
        [Test]
        public void FindNessieTest()
        {
            Puzzle.FindNessie(NessieImage, out var marked).Should().Be(2);

            marked.Lines.Should().BeEquivalentTo(
                ".####...#####..#...###..",
                "#####..#..#.#.####..#.#.",
                ".#.#...#.###...#.##.O#..",
                "#.O.##.OO#.#.OO.##.OOO##",
                "..#O.#O#.O##O..O.#O##.##",
                "...#.#..##.##...#..#..##",
                "#.##.#..#.#..#..##.#.#..",
                ".###.##.....#...###.#...",
                "#.####.#.#....##.#..#.#.",
                "##...#..#....#..#...####",
                "..#.##...###..#.#####..#",
                "....#.##.#.#####....#...",
                "..##.##.###.....#.##..#.",
                "#...#...###..####....##.",
                ".#.##...#.##.#.#.###...#",
                "#.###.#..####...##..#...",
                "#.###...#.##...#.##O###.",
                ".O##.#OO.###OO##..OOO##.",
                "..O#.O..O..O.#O##O##.###",
                "#.#..##.########..#..##.",
                "#.#####..#.#...##..#....",
                "#....##..#.#########..##",
                "#...#.....#..##...###.##",
                "#..###....##.#...##.##.#"
            );
        }
    }
}
